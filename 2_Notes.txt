1) Generate random data in bash script:
==========================================
	In the previous exercise, you wrote a script that prompted the user to provide a password for the account that was being created. In this lesson, you're going to learn a few different ways to generate some random data, including how to automate the process of generating a random password. This way you'll be able to improve your script by requiring less input from the user. And in my opinion, the more you can automate, the better.

	Now, before we do any real coding, let's look at the bash man page to see if it provides any way for us to get some random data.
		man bash 
	We'll just look/search for random. Since RANDOM is in all capital letters and by convention variables are in all capital letters, I can probably assume that RANDOM is a bash built-in variable and it is. Each time this parameter/variable is referenced, a random integer between 0 and 32,767 is generated.
	
		echo "${RANDOM}"
		
	If you think about it, something that is always changing is time. It's never the same time ever again. So, that is some data that is always changing. So, let's use the current date and time as the basis for a password to generate.
		
2) Rerun a command that starts with a given String:
=======================================================
	To run the most recent command that begins with a given string, use an exclamation mark followed by that string. For example, to run the last command that started with a “d”, type “ ! d “. Specify as much of the string to make it unique.
	
	I'm gonna do '!v' to execute the most recent command that starts with 'v'. And, this is called an event designator but it's a quick way to execute a previous command that starts with a given string. So, instead of me having to retype out the whole 'vim luser-demo05.sh', I am going to use '!v'.
	
	For ./luser-demo05.sh, we will use '!.' 
	
3) date command in Linux:
=============================
	man date 
	
	date +%s  -->  '+' says we're going to use a format. '%s' to get the Epoch time(number of seconds passed since 1st Jan, 1970
	date +%s%N  -->  '%N' is for getting the time in nanoseconds 
	
4) checksums or cryptographic hash functions:
=================================================
	A checksum is a numeric value computed for a block of data that is relatively unique. Checksums were and are used to verify the integrity of data such as files. For example, if you download a file and you wanna make sure that it's not corrupt in some way, you find the published checksums for the file and compare it to the file you downloaded. 

	Let's take CentOS for example. They publish sha1sum and sha256sum for their downloads. By the way, I didn't include the CentOS ISO that I'm about to use in the course download because it's about 700 megabytes at the time of this recording. So, if you wanna follow along with this specific section, you're going to have to download the ISO separately and then look at the checksums published by CentOS at the time you download the ISO file. You can get the checksum from the place where you download the iso file. I have captured those checksums for you in sha1sum.txt and sha256sum.txt files under shellclass/demos.

	How to get the checksum value for the downloaded file?
		So for each file that they publish, they produce a sha1sum/sha256sum that corresponds to that file.
		So we can use the 'sha1sum' command on our side/machine to run the sha1 mathematical algorithm against any file to return its checksum or sha1sum value. So I've downloaded the Minimal ISO, so I'm going to run sha1sum on the CentOS-7 Minimal ISO here which I have downloaded.
			sha1sum CentOS-7-x86_64-Minimal-1611.iso 
			  output: a string/value  --> So more or less, this number/value represents all the data in that single file.
			  
		If it matches what is published by CentOS then you're virtually guaranteed that the data is exactly the same.
		
		They(CentOS) also publish sha256sum. So let's use the sha256sum command against that ISO.
			sha256sum CentOS-7-x86_64-Minimal-1611.iso 
			
	Let's change the file just so slightly and see if the checksum still matches. So I'm just going to add one character to the end of the iso file. And one way to do that is just simply use echo with >> operator as shown below:
		echo "1" >> CentOS-7-x86_64-Minimal-1611.iso
		sha256sum CentOS-7-x86_64-Minimal-1611.iso  -->   Now, it doesn't match with the published sha256sum value for this file 
		
	So even a very slight change of data completely changes this checksum that's returned.
	
	By the way, there are other hash functions in checksum programs. Basically, sha1sum and sha256sum are hash functions. To all of them, run the following command. For any programs/files that ends with 'sum', we'll use a wild card of asterisk with 'sum'
		ls -l /usr/bin/*sum   --> list all the files that end with 'sum'
			output:
				-rwxr-xr-x 1 root root 56184 Dec 17  2018 /usr/bin/b2sum
				-rwxr-xr-x 1 root root 35576 Dec 17  2018 /usr/bin/cksum
				-rwxr-xr-x 1 root root 43864 Dec 17  2018 /usr/bin/md5sum
				-rwxr-xr-x 1 root root 47960 Dec 17  2018 /usr/bin/sha1sum
				-rwxr-xr-x 1 root root 56152 Dec 17  2018 /usr/bin/sha224sum
				-rwxr-xr-x 1 root root 56152 Dec 17  2018 /usr/bin/sha256sum
				-rwxr-xr-x 1 root root 60248 Dec 17  2018 /usr/bin/sha384sum
				-rwxr-xr-x 1 root root 60248 Dec 17  2018 /usr/bin/sha512sum
				-rwxr-xr-x 1 root root  9371 Jun 19  2020 /usr/bin/shasum
				-rwxr-xr-x 1 root root 39736 Dec 17  2018 /usr/bin/sum
				
	So, all these programs(cksum, md5sum, sha224sum, etc) do pretty much the same thing. They take a big chunk of data and reduce it down to a single string that represents that chunk of data to verify if it's the same or not.
	
	A checksum is a string of letters and numbers that is unique to a file, like a fingerprint. Checksums are generated by different algorithms, with the two most popular being Secure Hash Algorithms (SHAs) and the MD5 algorithm. Ubuntu MATE provides the SHA256 checksum on its download page.
	Verifying a download involves checking the checksum of the file you downloaded versus the checksum provided on the download web site. Mismatching checksums can indicate a corrupted or otherwise compromised file, so verifying your downloads is a good habit to adopt!
	
	References:
	1) https://ubuntu-mate.org/faq/verify-download-quick/
	2) https://itsfoss.com/checksum-tools-guide-linux/
	
5) Difference between ">" and ">>" in Linux:
==============================================
	As discussed in the introductory part, both operators are output direction operators. The main difference is mentioned below:

	">": Overwrites the existing file, or creates a file if the file of the mentioned name is not present in the directory.
		echo "Welcome to LinuxHint" > my_file_1.txt
		cat my_file_1.txt
		echo "Learn latest tips and tricks about Linux" > my_file_1.txt
		cat my_file_1.txt

	">>": Appends the existing file, or creates a file if the file of the mentioned name is not present in the directory.
		echo "Welcome to LinuxHint" >> my_file_2.txt
		cat my_file_2.txt
		echo "Learn latest tips and tricks about Linux" > my_file_2.txt
		cat my_file_2.txt

	While making modifications in a file and you want to overwrite the existing data, then use the ">" operator. If you want to append something to that file, use the ">>" operator.
	
6) Use of checksum in random password generation:
======================================================
	Now let's bring this back to password generation. As you might have noticed, the checksums are actually hexadecimals numbers with 0 to 9, representing the values from 0 to 9, and A to F, representing the values from 10 to 15. If we were to use a sha256sum as a password, for example, that password would consist of 16 different characters, that 0 to 9 and A to F and be 64 characters in length. That's a pretty darn good password.
	
	So, let's turn the current date and time into a sha256sum by piping the output of the date command as the input into the sha256sum command.
	
		date +%s | sha256sum
	
	Why does the above command work? I mean, earlier, we were running sha256sum against files. Now, we are running sha256sum and asking to take the data from standard input. Run the 'man sha256sum' for the answer. 	
		man sha256sum  -->  Print or check SHA256 (256-bit) checksums. With no FILE, or when FILE is -, read standard input.
	So, remember with a pipe, pipe turns the output of the previous command as standard input for the command that follows the pipe. So that is how this works.
	
	By the way, most commands work like this. If they take a file as an argument, you can also not use/pass the file and instead use standard input via a pipe and it will operate on that input.
	
	
	So if we wanna control the size of this generated password, you'll need to control the number of characters returned or displayed. One way to do this is with the head command. Let's chain the date command, the sha256sum command and the head command all together. So, you can have multiple pipes and not just one pipe. you can keep modifying the output and keep piping it into different commands. 
		date +%s | sha256sum | head -c8  --> to print/output 1st 8 characters
	
	If we wanna make this even better, we can add those nanoseconds the above command. Now, we will get even more random data. 
		date +%s%N | sha256sum | head -c8  --> to print/output 1st 8 characters
	
7) head command in Linux:
============================
	Just to briefly recap, how can you tell if head is a program on the system or if it's a shell builtin?
	Well, of course you can use the type command, 
		type -a head
		  output:  head is /usr/bin/head   --> this says, it's a program and not shell builtin

	So, we can't use 'help head'. What we have to do is use 'man head'. 
	Print  the  first 10 lines of a FILE to standard output. With no FILE, or when FILE is -, read standard input. So, we know that we can use this head command in conjunction with the pipe.
	
	We can use '-cK' option(like '-cK') or --bytes in the long form and what that does is prints the first K bytes of a file. So, if we do '-c1' then it would just print the first character of the file. 1 byte means 1 character in Linux.
		head -c1 /etc/passwd  -->  it prints the first character of the passwd file
	
	The next option is '-n' for lines and that prints the first n number of lines instead of the default first 10 lines.
		head -n1 /etc/passwd   -->  it prints the first line of /etc/passwd file
			OR
		head -n 1 /etc/passwd
			OR
		head -1 /etc/passwd  -->  this is an old style of using this head command
		
	Now, I'm sure you remember from the man page, how you can use standard input instead of a file with a head command, so let's try that out. Let's generate some output from the echo command. We'll just do 'echo testing' and then we will pipe that output as the standard input into the head command and let's just print the first two characters. 
		echo "testing" | head -c2  -->  it returns 'te'
	
8) tail command in Linux:
============================
		man tail 
	Print the last 10 lines of a FILE to standard output. With no FILE, or when FILE is -, read standard input. 
	
	tail -f <log_file_name>  --> to follow the log generation of any application in the specified log file 

9) shuf command in Linux:
============================
	Now, there are other probably, way more secure, ways to generate a password that has nothing to do with the current date and time. Let's add a special character to the generated password. Now let's start out by displaying the set of special characters that we want to use. And I'm actually going to store those into a variable.
		SC='!@#$%^&*()_-+='
		echo ${SC}  -->  output:  !@#$%^&*()_-+=
		
	Now we need a way to randomly extract just one special character from that list. There is a command called 'shuf', which will help us here. So let's look at the man page for this command.
		man shuf 
	
	The shuf command in Linux writes a random permutation of the input lines, from a file, to standard output. It pseudo randomizes an input in the same way as the cards are shuffled. With no FILE, or when FILE is -, read standard input.
	
		echo "hello" >> ambuj.txt 
		echo "hi" >> ambuj.txt 
		echo "welcome" >> ambuj.txt 
		cat ambuj.txt 
			output:
				hello
				hi
				welcome
				
		shuf ambuj.txt 
			output:
				hi
				hello
				welcome
		
		shuf ambuj.txt
			output:
				hi
				welcome
				hello
		
	The shuf command displays the input lines in random order as output. 
	
		shuf -n 1 ambuj.txt 
			output:  welcome
			
		shuf -n 1 ambuj.txt 
			output:  hello
		
		shuf -n 1 ambuj.txt 
			output:  welcome
			
		shuf -n 2 ambuj.txt 
			output:  
				hi
				hello
				
	So, we need to break our string(i.e., ${SC}) of characters into individual lines, each line containing a character, so that, we can then use shuf to do the randomization. This can be achieved using 'fold' command in Linux.

		echo "${SC}" | fold -w1 | shuf  -->  to get a random order of list of special characters.
		echo "${SC}" | fold -w1 | shuf -n1  --> to get a random special character
		echo "${SC}" | fold -w1 | shuf | head -c1  --> to get a random special character
		
				
10) fold command in Linux:
===========================
		man fold 
	The fold command in Linux wraps each input line in a file to fit a specified width and prints it to the standard output. With no FILE, or when FILE is -, read standard input. By default, it wraps lines at a maximum width of 80 columns, which is configurable. You use the fold command to transform a single line of text into multiple lines.
	
		fold abccba.txt  
		
	'w' -->  By using this option in the fold command, we can limit the width by the number of columns.
		fold -w50 abccba.txt  -->  we wrap the lines of abccba.txt to a width of 50 columns
		
		SC='!@#$%^&*()_-+='
		echo ${SC}  -->  output:  !@#$%^&*()_-+=
		
		echo "${SC}" | fold -w1
			output:
				!
				@
				#
				$
				%
				^
				&
				*
				(
				)
				_
				-
				+
				=

11) Positional parameter in bash script:
============================================
	The variable of dollar zero(i.e., ${0}) is actually a positional parameter and positional parameters are variables that contain the contents of the command line.

	Before we go any further, let's talk about the definition of a parameter versus an argument. A parameter is a variable that is being used inside the shell script. An argument is the data passed into the shell script. So, an argument, supplied on the command line, becomes the value stored in a parameter. With that in mind, the very first positional parameter is ${0} which contains the name of the script itself. The next positional parameter is ${1} which stores the value of the first argument passed to the script on the command line. The positional parameter, ${2}, stores the second argument. ${3} stores the third argument and so on.
	
	Create a bash script of name 'luser-demo06.sh' with the following contents.
		#!/bin/bash
		echo "You executed this command: ${0}"
	
	Save the file and run the follow commands.
		chmod 755 luser-demo06.sh 
		./luser-demo06.sh 
			output:
				You executed this command: ./luser-demo06.sh
	
	So, notice how ${0} expanded to how we executed the script, this dot forward slash and then the script name. Now, let's change how we call the script by providing the full path to the script.
		/home/vagrant/luser-demo06.sh 
			output:
				You executed this command: /home/vagrant/luser-demo06.sh
				
	First, let's prove that our script is not in our current PATH. We can do that using 'which' command
		which luser-demo06.sh
			output:
				/usr/bin/which: no luser-demo06.sh in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/vagrant/bin)
				
	Now let's take a copy of our script(luser-demo06.sh) and place it into our PATH, by putting it into /usr/local/bin directory. 
		sudo cp luser-demo06.sh /usr/local/bin
		
	Now, our script is in our PATH. So, we can execute it without supplying a path to the script.
		which luser-demo06.sh
			output:
				/usr/local/bin/luser-demo06.sh 
		
		luser-demo06.sh 
			output:
				You executed this command: /usr/local/bin/luser-demo06.sh 
				
	Now notice what's stored in ${0}. It's the full path to the command which is /usr/local/bin/luser-demo06.sh, even though we only typed in luser-demo06.sh. At the command line, bash found it in our PATH and executed it at that path. That's why the full path to the command/program is stored in dollar sign zero.
	
	Before we move on, let's remove the script from our PATH.
		sudo rm /usr/local/bin/luser-demo06.sh
		hash -r
				
12) PATH environment variable:
===================================
	So, one thing I've glossed over is the command search path which is stored in the environment variable PATH. Up until this point, we've just been supplying either a full or relative path to the scripts we've created. Let's take a quick look at what the bash man page has to say about the PATH variable before we move forward.
		man bash  -->  We'll do a forward search with a forward slash followed by PATH. We'll just keep hitting 'n' until we get to the PATH variable.
			It says that PATH is a colon separated list of directories in which the shell looks for commands.
			
	Every time you type something in at the command line, bash first tries to find a function with that name and execute it. Now, we haven't covered functions yet but don't worry, we will. So, if it doesn't find a function with that name, it looks for that command in its list of builtin commands. If it is a shell builtin command, then it executes that. Now, you've been working with several builtin commands, such as echo, type, help and so on. Now, if the command you type at the command prompt or on the command line is not a function or it's not a shell builtin then bash searches through the list of directories defined in the PATH variable and executes the first match that it finds. If no match is found, then a command not found error message is displayed.
		echo ${PATH} 
			output:
				/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/vagrant/bin 
	
	So, in our particular case here, if a command is not a function or a shell builtin then bash will look for that command first in /usr/local/bin then in /usr/bin. Then, it will look in /usr/local/sbin and so on down the list.
	
	It's important to point out that the PATH can be changed. So, it's not something that is guaranteed to be the same for every system. By the way, if you want to control the PATH, you can do so in your script by manipulating the PATH variable there.
	
	Let's use a neat little command called 'which' to tell us which command will be executed. Let's take the head command that we've used before.
		which head 
			output:
				/usr/bin/head  --> So, this tells us that when we type in 'head' at the command line, the program located at /usr/bin/head will be executed.
		
		which help 
			output:
				which: no help in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/vagrant/bin)  --> because help is not a program. 
		
		type -a help  --> help is a shell builtin only 
		
	The first directory in our path variable is actually /usr/local/bin. So, let's create our own shell script named 'head' and place it in there. We'll need root privileges to do that. By the way, .sh extension is optional for bash script. So, no need to create head.sh, instead we can also create 'head'. So, I'm going to create the file with sudo 
		sudo vim /usr/local/bin/head 
		press 'i' for INSERT into the file 
		
		#!/bin/bash
		echo 'Hello from my head.'
		
		sudo chmod 755 /usr/local/bin/head
		
	Now, head program is in 2 directories(/usr/local/bin and /usr/bin). Let's see which head will be executed.
		which head 
			output:
				/usr/local/bin/head
				
	Let's use the '-a' option to 'which' command which forces it to print all matching executables that are in our path.
		which -a head 
			output:
				/usr/local/bin/head
				/usr/bin/head
				
	So, there are the two commands named the exact same thing. Both are named 'head' but the first one that is found is executed. So, let's go ahead and just execute this command. 
		head 
			output:
				Hello from my head.
	
	Now, if you want to override the default then just supply the full path
		/usr/bin/head -n1 /etc/passwd
	
	Let's get rid of the version of our head.
		sudo rm /usr/local/bin/head
		
	Here is one little quirk(abrupt twist) with rapidly adding and removing programs from your PATH. Bash uses a hash table to remember the full path name of executable files. It(bash) looks up the location to the executable once and then remembers it. If you look at the 'type head' command, it says that head is hashed to '/usr/local/bin/head'
		type head  --> output: head is hashed (/usr/local/bin/head)

	That simply means that bash will execute that command(/usr/local/bin/head) at the path without first searching for that command. So, here's the quirk. Bash thinks that head is still located at /usr/local/bin/head. However, we just deleted it, just a few seconds ago. So, let's execute the command(/usr/local/bin/head) and see what happens.
		head 
			output:
				-bash: /usr/local/bin/head: No such file or directory

	So, if you run into this type of issue, you can make bash forget all these hashed locations by using the 'hash' shell builtin
		hash -r 

	Now, if we do 'type head', we can see that it searches the path and it finds the one that really is there
		type head 
			output:
				head is /usr/bin/head
				
	Of course, you can read about the hash shell builtin with the command 'help hash' command.
		help hash

and user bin.


13) basename command in Linux:
==============================
	There's a command called basename that removes the directory component and just returns the file name. So, let's read up about that 
		man basename

	So, let's see what happens when we execute this.
		basename /home/vagrant/luser-demo06.sh
			output:
				luser-demo06.sh  -->  it just returns the file name without the directory portion of the file
				
	By the way, basename isn't doing any smart checking to see if the file exists. It just strips off the directory portion of a string that is passed to it. So, we can use the basename with something that clearly doesn't exist but it will still do its job.
		basename /not/here
			output:
				here 
				
	The counterpart to the basename command is dirname.
	
14) dirname command in Linux:
================================
		man dirname
	
	This command(dirname) strips the last component(i.e., file name) from the path. 
		dirname /vagrant/luser-demo06.sh 
			output:
				/vagrant  -->  '/vagrant' is returned because that is the directory name or the directory portion of that full path
			
	Like basename command, dirname doesn't do any smart checking. We can give it a non-existent path and it will simply return the portion that looks like the directory. 
		dirname /this/is/not/here 
			output:
				/this/is/not
				
15) tree command in Linux:
============================
	If we want to display the directory structure using the simple 'tree' command without adding any option
		tree  -->  Here 'tree' command will output the directory structure, starting from the current directory.
		
		tree <directory_path>  --> to display the folder structure of the specified directory 
		
16) Special parameters in bash script/shell:
==================================================
	Let's look at the bash man page real quick. We are looking for the 'special parameter' section of the page  
		man bash  --> Forward Search(/) for 'Special Para' 
	
	#  -->  The thing I want to point out here is the pound(#) sign and the pound(#) sign says that it expands to the number of positional parameters. So, ${#} tells us how many arguments were supplied on the command line.
	
	@  -->  This parameter holds all arguments passed to the script and treat them as an array. So, ${@} gives an array containing all the arguments passed to the script
	
	*  -->  This parameter gives all arguments passed to the shell script separated by the space. If you want to treat all the parameters, separated by the space, as a single word/parameter then use ${*}.
	
		Note: 
			However, the difference between ${*} and ${@} is only noticed when enclosing them in double quotation marks like "${*}" and "${@}". That difference is that "${*}" treats all the positional parameters as one string and "${@}" treats them as separate words.
	
	$i  -->  This parameter represents the ith argument passed to the shell script like $1(it expands to the first argument supplied on the command line), $2(it expands to the second argument supplied on the command line) and so on. 
	
	$0  -->  This parameter represents the script name.
	
	$?  -->  This parameter represents the exit status of the last command that executed.  The 0 code represents success and 1 represents failure. 
	
17) Passing argument, which contains space, to any script/program:
=====================================================================
	When an argument contains a space or spaces then enclosed that in double quotes to make it pass as a single argument
		For example, ./luser-demo06.sh a b "c d e" f     --> here, you are passing 4 arguments(a, b, c d e and f)
		
	So, in reality, because they're enclosed in double quotation marks, they're treated as one argument. 
		For example, ./luser-demo06.sh one "this whole thing is two" three   -->  passing 3 arguments
		
	I'm just going to use single quotation marks because that works too.
		For example, ./luser-demo06.sh one 'this whole thing is two' three   -->  passing 3 arguments
		
	Another thing you can do is simply enclose everything in quotation marks, and that's fine as well.
		For example, ./luser-demo06.sh 'one' 'this whole thing is two' 'three'   -->  passing 3 arguments
		
	Three arguments on the command line, which interprets to three positional parameters inside the script.
		./luser-demo06.sh jason steve jan fred
	
18) for loop in bash script:
================================
	The idea behind this script(luser-demo06.sh under shellclass_scripts_by_udemy/demos) is that we're going to perform the same action over a list of items. Now, this is the perfect time to use a for loop. Let's take a second and look at the for shell builtin. 
		type -a for   -->  for is a shell keyword. So, that's a shell builtin
	
	So, what we can do is get help for 'for'. I know that there's going to be a good bit of information scroll down to the screen. So, I'm just going to pipe this to the head command to get just the first ten lines of output.
		help for | head 
			output:
				for: for NAME [in WORDS ... ] ; do COMMANDS; done
					Execute commands for each member in a list.

					The `for' loop executes a sequence of commands for each member in a
					list of items.  If `in WORDS ...;' is not present, then `in "$@"' is
					assumed.  For each element in WORDS, NAME is set to that element, and
					the COMMANDS are executed.

					Exit Status:
					Returns the status of the last command executed.				
	
	The NAME you see in the help here is actually a variable name for each item in the list of words. The variable NAME is set to that item.
	For example, in the below for loop, X is the variable name and we're going to provide a list of 3 names.
	
		for X in Frank Claire Doug
		do 
		  echo "Hi ${X}."
		done
		
			output:
				Hi Frank.
				Hi Claire.
				Hi Doug.
				
	If you want to, you can place this command(for loop) all on one line using the semicolons as the command separator.
		for X in Frank Claire Doug; do   echo "Hi ${X}."; done 
			output:
				Hi Frank.
				Hi Claire.
				Hi Doug.
				
19) while loop in bash script:
================================
		type -a while  -->  while is a shell keyword. So, that's a shell builtin
		help while 
			output:
				while: while COMMANDS; do COMMANDS; done
					Execute commands as long as a test succeeds.

					Expand and execute COMMANDS as long as the final command in the
					`while' COMMANDS has an exit status of zero.

					Exit Status:
					Returns the status of the last command executed.
	
	for example,
		while [[ "${X}" -eq 1 ]]
		do
		  echo "This is the value of X: ${X}"
		  X=7
		done 
		
			OR
		
		while [[ "${X}" -eq 1 ]]; do  echo "This is the value of X: ${X}";  X=7; done   
		
			output:
				This is the value of X: 1
	
	Make sure that there is a space in between 'while' and 'double square brackets' and a space after the double square brackets.
				
20) true command in Linux:
============================
	I want to introduce you to the true command. It's only job is to return an exit status of zero. Let's see what type of command is true?
		type -a true    -->  it's a shell builtin as well as a executable program on the Linux system 
			output:
				true is a shell builtin
				true is /usr/bin/true
				
	Of course, we can get help on a built-in by using help command as well as we can get help on a program using man command. 
		help true 
		man true 
			
		true  --> run this command 
		echo $?  
			output:
				0
		
		true blah  --> passing command line argument which will be ignored and returns 0 exit status 
		echo ${?}	
			output:
				0
				
21) sleep command in Linux:
==============================
	'sleep' simply delays the execution for a specified amount of time.
		type -a sleep   -->  sleep happens to be an executable program on the system. It's not a shell builtin.
			output:
				sleep is /usr/bin/sleep
		
	So we'll use the man page to learn more about sleep.
		man sleep   
		
	You can use sleep followed by a number and a suffix and that suffix can be 's' for seconds, 'm' for minutes, 'h' for hours or 'd' for days. So, sleep does what it sounds like. It just sleeps. It doesn't do anything for a specific amount of time. Default suffix is 's'.
		sleep 1  OR  sleep 1s 
		sleep .5  OR  sleep 0.5  --> sleep for half a second 
		
22) Infinite loop in bash script:
=====================================
		while [[ true ]]
		do 
		  echo "${RANDOM}"
		  sleep 1
		done 
	  
	Now, to break out of this loop, all you have to do is hold down the control(ctrl) key and type C(i.e., ctrl + c). So, 'ctrl + c' sends an interrupt signal to the command which makes it stop. Now, this isn't something unique to the while command. You can use this to stop any command running in the foreground. For example, if you execute sleep and want to interrupt it and return to the command line sooner, you can use 'ctrl + c' there as well.
	
		sleep 10m  --> press 'ctrl + c' to interupt the execution
		
23) shift builtin in bash script:
=====================================
		type -a shift  -->  shift is a shell builtin
		help shift
			output:
				shift: shift [n]
					Shift positional parameters.

					Rename the positional parameters $N+1,$N+2 ... to $1,$2 ...  If N is
					not given, it is assumed to be 1.

					Exit Status:
					Returns success unless N is negative or greater than $#.
		
	Now, what the 'shift' command really does is that it removes the positional parameter from the list starting with ${1}. It just chops off ${1}. So, when you execute the 'shift' command, the value stored in ${1} is removed, it's just gone. What also happens is that, the value stored in ${2} shifts down to ${1}, ${3} replaces the value in ${2}, ${4} replaces the value in ${3}, so on and so forth. Also, the special parameter of $#/${#} is reduced by one. Now, as you remember, ${#} contains the number of arguments that were supplied on the command line. By default, 'shift' command shifts everything one place to the right. Executing 'shift' itself/alone is the same thing as executing shift 1. If you wanna shift everything by two places, use 'shift 2'. In that case, ${#} will be decreased by two. If you wanna shift everything by three positions, use 'shift 3' and so on.
				
	It might not be obvious when you would want to use the shift command beyond our while loop that we've demonstrated above. So, here are a couple of thoughts to keep in mind. One time shift comes in handy is when you want to have a user, supply information/arguments to your script and there is one argument or piece of data that can contain multiple words. For instance, data you would want to use in the 'comment' field/option(man useradd) when creating a user using 'useradd'. In this case, you would tell/ask the user to supply a username which would be ${1}. Then, you would 'shift' and then what is left over becomes the comments field i.e., ${1}, ${2}, ${3} and so on. That's one example.
			
		